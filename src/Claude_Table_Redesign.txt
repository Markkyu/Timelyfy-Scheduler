import generateTimeSlots from "./generateTimeSlots";

export default function ScheduleTable({
  headers,
  timeSlotMap,
  onCellClick,
  schedules,
  selectedCourse,
}) {
  const timeSlots = generateTimeSlots();

  const findCourseAt = (dayIndex, timeIndex) =>
    schedules?.find(
      (s) => s.slot_day === dayIndex && s.slot_time === timeIndex
    );

  const isLunchBreak = (timeIndex) => timeIndex === 10 || timeIndex === 11;

  // Modern gradient color palette with vibrant tones
  const colorPalette = [
    {
      bg: "bg-gradient-to-br from-blue-400 via-blue-500 to-blue-600",
      text: "text-white",
      hover: "hover:from-blue-500 hover:via-blue-600 hover:to-blue-700",
      shadow: "shadow-blue-200",
    },
    {
      bg: "bg-gradient-to-br from-emerald-400 via-emerald-500 to-emerald-600",
      text: "text-white",
      hover: "hover:from-emerald-500 hover:via-emerald-600 hover:to-emerald-700",
      shadow: "shadow-emerald-200",
    },
    {
      bg: "bg-gradient-to-br from-violet-400 via-violet-500 to-violet-600",
      text: "text-white",
      hover: "hover:from-violet-500 hover:via-violet-600 hover:to-violet-700",
      shadow: "shadow-violet-200",
    },
    {
      bg: "bg-gradient-to-br from-rose-400 via-rose-500 to-rose-600",
      text: "text-white",
      hover: "hover:from-rose-500 hover:via-rose-600 hover:to-rose-700",
      shadow: "shadow-rose-200",
    },
    {
      bg: "bg-gradient-to-br from-amber-400 via-amber-500 to-amber-600",
      text: "text-white",
      hover: "hover:from-amber-500 hover:via-amber-600 hover:to-amber-700",
      shadow: "shadow-amber-200",
    },
    {
      bg: "bg-gradient-to-br from-cyan-400 via-cyan-500 to-cyan-600",
      text: "text-white",
      hover: "hover:from-cyan-500 hover:via-cyan-600 hover:to-cyan-700",
      shadow: "shadow-cyan-200",
    },
  ];

  // Assign a consistent color per course
  const courseColorMap = {};
  let colorIndex = 0;
  schedules?.forEach((sched) => {
    const key = sched.slot_course;
    if (!courseColorMap[key]) {
      courseColorMap[key] = colorPalette[colorIndex % colorPalette.length];
      colorIndex++;
    }
  });

  return (
    <div className="bg-gradient-to-br from-gray-50 to-gray-100 p-8 rounded-3xl shadow-xl border border-gray-200 overflow-x-auto">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-3xl font-bold text-gray-800 mb-2">
          Weekly Schedule
        </h2>
        <p className="text-sm text-gray-500">
          Click on a time slot to manage your schedule
        </p>
      </div>

      {/* Table Container */}
      <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-200">
        <table className="min-w-5xl 2xl:min-w-7xl w-full border-collapse">
          <thead>
            <tr className="bg-gradient-to-r from-gray-800 to-gray-900">
              <th className="px-6 py-4 text-left">
                <span className="text-xs uppercase tracking-wider text-gray-400 font-semibold">
                  Time
                </span>
              </th>
              {headers?.map((weekday, i) => (
                <th
                  key={i}
                  className="px-6 py-4 text-center border-l border-gray-700"
                >
                  <div className="flex flex-col">
                    <span className="text-sm font-bold text-white uppercase tracking-wide">
                      {weekday}
                    </span>
                  </div>
                </th>
              ))}
            </tr>
          </thead>

          <tbody className="divide-y divide-gray-100">
            {timeSlots.map((time, timeIndex) => (
              <tr
                key={timeIndex}
                className="hover:bg-gray-50 transition-colors duration-150"
              >
                {/* Time Column */}
                <td className="px-6 py-3 bg-gray-50 border-r border-gray-200">
                  <div className="flex flex-col">
                    <span className="text-sm font-semibold text-gray-700">
                      {time.time_slot}
                    </span>
                  </div>
                </td>

                {/* Day Columns */}
                {headers.map((_, dayIndex) => {
                  const course = findCourseAt(dayIndex, timeIndex);

                  // Handle Lunch Break
                  if (isLunchBreak(timeIndex)) {
                    return (
                      <td
                        key={`${dayIndex}-${timeIndex}`}
                        className="border-l border-gray-100 px-4 py-3"
                      >
                        <div className="flex items-center justify-center h-full">
                          <div className="bg-gradient-to-r from-orange-100 to-amber-100 px-4 py-2 rounded-xl border border-orange-200">
                            <div className="flex items-center gap-2">
                              <span className="text-lg">üçΩÔ∏è</span>
                              <span className="text-sm font-semibold text-orange-800">
                                Lunch Break
                              </span>
                            </div>
                          </div>
                        </div>
                      </td>
                    );
                  }

                  // Skip merged cells
                  const previous = findCourseAt(dayIndex, timeIndex - 1);
                  if (
                    previous &&
                    previous.slot_course === course?.slot_course
                  ) {
                    return null;
                  }

                  // Calculate rowSpan for course duration
                  let rowSpan = 1;
                  if (course) {
                    for (let i = timeIndex + 1; i < timeSlots.length; i++) {
                      const next = findCourseAt(dayIndex, i);
                      if (next && next.slot_course === course.slot_course) {
                        rowSpan++;
                      } else break;
                    }
                  }

                  // Get course color
                  const courseColor = course
                    ? courseColorMap[course.slot_course]
                    : null;

                  return (
                    <td
                      key={`${dayIndex}-${timeIndex}`}
                      rowSpan={rowSpan}
                      onClick={() => {
                        if (!selectedCourse && course) {
                          console.log(course, time);
                          return;
                        }
                        onCellClick(course, dayIndex, timeIndex);
                      }}
                      className={`border-l border-gray-100 px-3 py-2 transition-all duration-300 ease-out
                        ${
                          course
                            ? "cursor-pointer"
                            : "cursor-pointer hover:bg-green-50 hover:border-green-200"
                        }`}
                    >
                      {course ? (
                        <div
                          className={`
                          ${courseColor.bg} 
                          ${courseColor.text}
                          ${courseColor.hover}
                          h-full min-h-[60px] rounded-xl px-4 py-3
                          shadow-lg ${courseColor.shadow}
                          transform hover:scale-[1.02] hover:shadow-xl
                          transition-all duration-300 ease-out
                          flex flex-col items-center justify-center gap-1
                          border border-white/20
                        `}
                        >
                          <span className="text-base font-bold tracking-wide">
                            {course.slot_course}
                          </span>
                          {rowSpan > 1 && (
                            <span className="text-xs opacity-90 font-medium">
                              {rowSpan * 30} mins
                            </span>
                          )}
                        </div>
                      ) : (
                        <div className="h-full min-h-[60px] flex items-center justify-center">
                          <span className="text-gray-300 text-xs font-medium">
                            +
                          </span>
                        </div>
                      )}
                    </td>
                  );
                })}
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Legend */}
      {schedules && schedules.length > 0 && (
        <div className="mt-6 flex flex-wrap gap-3">
          {Object.entries(courseColorMap).map(([courseName, color]) => (
            <div
              key={courseName}
              className="flex items-center gap-2 bg-white px-3 py-2 rounded-lg shadow-sm border border-gray-200"
            >
              <div
                className={`w-4 h-4 rounded ${color.bg} shadow-sm`}
              ></div>
              <span className="text-sm font-medium text-gray-700">
                {courseName}
              </span>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}